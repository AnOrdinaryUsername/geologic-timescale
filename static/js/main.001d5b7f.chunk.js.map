{"version":3,"sources":["reportWebVitals.ts","components/events.ts","components/Event.tsx","root/App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","events","name","date","MILLION","BILLION","Event","readableDate","position","parseFloat","toString","toFixed","Number","replace","yearDifference","nextDate","length","lineLength","shouldHideLine","line","TimelineConnector","sx","height","display","flexGrow","TimelineItem","minHeight","TimelineOppositeContent","color","TimelineSeparator","TimelineDot","TimelineContent","App","Timeline","map","props","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gECJDQ,EAAgC,CAC3C,CACEC,KAAM,cACNC,KAAM,MAER,CACED,KAAM,0BACNC,KAAM,MAER,CACED,KAAM,qCACNC,KAAM,MAER,CACED,KAAM,uCACNC,KAAM,MAER,CACED,KAAM,uDACNC,KAAM,MAER,CACED,KAAM,uBACNC,KAAM,MAER,CACED,KAAM,iBACNC,KAAM,MAER,CACED,KAAM,8BACNC,KAAM,KAER,CACED,KAAM,yDACNC,KAAM,MAER,CACED,KAAM,mCACNC,KAAM,OAER,CACED,KAAM,4BACNC,KAAM,KAER,CACED,KAAM,+CACNC,KAAM,MAER,CACED,KAAM,kBACNC,KAAM,OAER,CACED,KAAM,gBACNC,KAAM,MAER,CACED,KAAM,8CACNC,KAAM,MAER,CACED,KAAM,yBACNC,KAAM,OAER,CACED,KAAM,sDACNC,KAAM,MAER,CACED,KAAM,8BACNC,KAAM,MAER,CACED,KAAM,qDACNC,KAAM,KAER,CACED,KAAM,qCACNC,KAAM,MAER,CACED,KAAM,0BACNC,KAAM,KAER,CACED,KAAM,0BACNC,KAAM,K,OClFJC,EAAU,IACVC,EAAU,IAMD,SAASC,EAAT,GAAiD,IAC1DC,EAD0BL,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMK,EAAmB,EAAnBA,SAIxCD,EADEJ,EAAOE,EACG,UAAMI,YAAYN,EAAOE,GAASK,YAAYC,QACxD,GADU,sBAGHR,EAAOC,EACJ,UAAMQ,OAChBH,YAAYN,EAAOC,GAASM,YAAYC,QAAQ,IADtC,sBAIA,UAA2BR,EAuChCO,WAAWG,QAAQ,wBAAyB,KAvCvC,cAGd,IAAIC,EAAiB,EACfC,EAAWP,EAAW,EAExBO,EAAWd,EAAOe,SACpBF,EAAiBb,EAAOO,GAAUL,KAAOF,EAAOc,GAAUZ,MAG5D,IAAMc,EAA4BH,EAwBdV,EAtDc,GA+B5Bc,EAAgC,IAAfD,EAAmB,OAAS,UAE7CE,EACJ,cAACC,EAAA,EAAD,CACEC,GAAI,CAAEC,OAAO,GAAD,OAAKL,EAAL,MAAqBM,QAASL,EAAgBM,SAAU,KAIxE,OACE,eAACC,EAAA,EAAD,CAAcJ,GAAI,CAAEK,UAAW,QAA/B,UACE,cAACC,EAAA,EAAD,CAAyBC,MAAM,iBAA/B,SACGrB,IAEH,eAACsB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IACCX,KAEH,cAACY,EAAA,EAAD,UAAkB7B,OCxCT8B,MAZf,WACE,OACE,+BACE,cAACC,EAAA,EAAD,CAAUzB,SAAS,YAAnB,SACGP,EAAOiC,KAAI,SAACC,EAAOC,GAAR,OACV,cAAC9B,EAAD,2BAAW6B,GAAX,IAAkB3B,SAAU4B,aCJtCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BjD,M","file":"static/js/main.001d5b7f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export interface GeologicEvents {\n  name: string;\n  date: number;\n}\n\nexport const events: Array<GeologicEvents> = [\n  {\n    name: \"Earth forms\",\n    date: 4_600_000_000,\n  },\n  {\n    name: \"The Earth's layers form\",\n    date: 4_500_000_000,\n  },\n  {\n    name: \"The Earthâ€™s first oceans form\",\n    date: 4_400_000_000,\n  },\n  {\n    name: \"First prokaryotes (bacteria & archea\",\n    date: 3_500_000_000,\n  },\n  {\n    name: \"First eukaryotes (single celled organisms with DNA!)\",\n    date: 2_700_000_000,\n  },\n  {\n    name: \"Oxygenation of Earth\",\n    date: 2_400_000_000,\n  },\n  {\n    name: \"Snowball Earth\",\n    date: 650_000_000,\n  },\n  {\n    name: \"First multicellular animals\",\n    date: 600_000_000,\n  },\n  {\n    name: \"First evidence of vertebrates (animals with backbones)\",\n    date: 530_000_000,\n  },\n  {\n    name: \"First evidence of plants on land\",\n    date: 465_000_000,\n  },\n  {\n    name: \"First evidence of insects\",\n    date: 400_000_000,\n  },\n  {\n    name: \"First evidence of vertebrate animals on land\",\n    date: 350_000_000,\n  },\n  {\n    name: \"First dinosaurs\",\n    date: 247_000_000,\n  },\n  {\n    name: \"First mammals\",\n    date: 240_000_000,\n  },\n  {\n    name: \"Supercontinent Pangea begins to break apart\",\n    date: 220_000_000,\n  },\n  {\n    name: \"First flowering plants\",\n    date: 145_000_000,\n  },\n  {\n    name: \"Extinction of non-avian dinosaurs and other animals\",\n    date: 65_000_000,\n  },\n  {\n    name: \"First primate in genus Homo\",\n    date: 1_800_000,\n  },\n  {\n    name: \"Appearance of Homo Sapiens (Modern form of humans)\",\n    date: 100_000,\n  },\n  {\n    name: \"Humans first inhabit North America\",\n    date: 13_000,\n  },\n  {\n    name: \"End of the last ice age\",\n    date: 10_000,\n  },\n  {\n    name: \"Humans land on the moon\",\n    date: 50,\n  },\n];\n","import TimelineConnector from \"@mui/lab/TimelineConnector\";\nimport TimelineContent from \"@mui/lab/TimelineContent\";\nimport TimelineDot from \"@mui/lab/TimelineDot\";\nimport TimelineItem from \"@mui/lab/TimelineItem\";\nimport TimelineOppositeContent from \"@mui/lab/TimelineOppositeContent\";\nimport TimelineSeparator from \"@mui/lab/TimelineSeparator\";\nimport type { GeologicEvents } from \"./events\";\nimport { events } from \"./events\";\n\nconst PIXELS_IN_ONE_MILLION_YEARS = 10;\nconst MILLION = 1_000_000;\nconst BILLION = 1_000_000_000;\n\ninterface Props extends GeologicEvents {\n  position: number;\n}\n\nexport default function Event({ name, date, position }: Props) {\n  let readableDate: string;\n\n  if (date > BILLION) {\n    readableDate = `${parseFloat((date / BILLION).toString()).toFixed(\n      1\n    )} billion years ago`;\n  } else if (date > MILLION) {\n    readableDate = `${Number(\n      parseFloat((date / MILLION).toString()).toFixed(2)\n    )} million years ago`;\n  } else {\n    readableDate = `${makeNumberHaveCommas(date)} years ago`;\n  }\n\n  let yearDifference = 0;\n  const nextDate = position + 1;\n\n  if (nextDate < events.length) {\n    yearDifference = events[position].date - events[nextDate].date;\n  }\n\n  const lineLength = convertMYAToPx(yearDifference);\n  const shouldHideLine = lineLength === 0 ? \"none\" : \"initial\";\n\n  const line = (\n    <TimelineConnector\n      sx={{ height: `${lineLength}px`, display: shouldHideLine, flexGrow: 0 }}\n    />\n  );\n\n  return (\n    <TimelineItem sx={{ minHeight: \"auto\" }}>\n      <TimelineOppositeContent color=\"text.secondary\">\n        {readableDate}\n      </TimelineOppositeContent>\n      <TimelineSeparator>\n        <TimelineDot />\n        {line}\n      </TimelineSeparator>\n      <TimelineContent>{name}</TimelineContent>\n    </TimelineItem>\n  );\n}\n\nfunction convertMYAToPx(years: number): number {\n  const MYA = years / MILLION;\n  return MYA * PIXELS_IN_ONE_MILLION_YEARS;\n}\n\nfunction makeNumberHaveCommas(x: number): string {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n","import Timeline from \"@mui/lab/Timeline\";\nimport React from \"react\";\nimport Event from \"../components/Event\";\nimport { events } from \"../components/events\";\n\nfunction App() {\n  return (\n    <main>\n      <Timeline position=\"alternate\">\n        {events.map((props, index) => (\n          <Event {...props} position={index} />\n        ))}\n      </Timeline>\n    </main>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./root/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}